<?php

namespace NAO\BackOfficeBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Security\Core\User\UserInterface;

/**
* User
*
* @ORM\Table(name="users")
* @ORM\Entity
*/
class User implements UserInterface, \Serializable
{
    /**
    * @ORM\Column(name="id", type="integer")
    * @ORM\Id
    * @ORM\GeneratedValue(strategy="AUTO")
    */
    private $id;

    /**
    * @ORM\Column(name="pseudo", type="string", unique=true)
    */
    private $username;

    /**
    * @ORM\Column(name="password", type="string")
    */
    private $password;

    /**
    * @ORM\Column(name="roles", type="array")
    */
    private $roles = array();

    /**
    * @ORM\Column(name="user_name", type="string")
    */
    private $name;

    /**
    * @ORM\Column(name="user_first_name", type="string")
    */
    private $firstName;

    /**
    * @ORM\Column(name="date_creation", type="datetime")
    */
    private $creationDate;

    /**
    * @ORM\Column(name="birth_date", type="datetime")
    */
    private $birthDate;

    /**
    * @ORM\Column(name="email", type="string")
    */
    private $email;

    public function getUsername()
    {
        return $this->username;
    }

    public function getSalt()
    {
        // you *may* need a real salt depending on your encoder
        // see section on salt below
        return null;
    }

    public function getPassword()
    {
        return $this->password;
    }

    public function getRoles()
    {
        return $this->roles;
    }

    public function eraseCredentials()
    {
    }

    public function serialize()
    {
        return serialize(array(
            $this->id,
            $this->username,
            $this->password,
            // $this->salt,
        ));
    }

    public function unserialize($serialized)
    {
        list (
            $this->id,
            $this->username,
            $this->password,
            // $this->salt
            ) = unserialize($serialized);
        }
    }
