<?php

namespace NAO\AppBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;

/**
* User
*
* @ORM\Table(name="users")
* @ORM\Entity(repositoryClass="NAO\AppBundle\Repository\UserRepository")
* @UniqueEntity(fields="username", message="Ce pseudo n'est pas disponible")
* @UniqueEntity(fields="email", message="Il y a déjà un compte lié à cet email. Vous pouvez vous connecter")
*/
class User implements UserInterface, \Serializable
{
    /**
    * @ORM\Column(name="id", type="integer")
    * @ORM\Id
    * @ORM\GeneratedValue(strategy="AUTO")
    */
    private $id;

    /**
    * @ORM\Column(name="username", type="string", unique=true)
    * @Assert\NotBlank()
    */
    private $username;

    /**
     * Mot de passe en clair. NE PAS FLUSHER
     *
     * @Assert\Length(max=4096)
     */
    private $plainPassword;

    /**
    * Mot de passe encodé
    * @ORM\Column(name="password", type="string")
    */
    private $password;

    /**
    * @ORM\Column(name="roles", type="array")
    */
    private $roles = array();

    /**
    * @ORM\Column(name="date_creation", type="datetime")
    */
    private $creationDate;

    /**
    * @ORM\Column(name="email", type="string")
    * @Assert\NotBlank()
    * @Assert\Email()
    */
    private $email;

    /**
     * @ORM\OneToMany(targetEntity="NAO\AppBundle\Entity\Observation", mappedBy="owner")
     */
    private $observations;

    public function __construct() {
        $this->creationDate = new \DateTime();
        $this->roles = array('ROLE_USER');
    }

    public function getSalt()
    {
        return null;
    }

    public function getRoles()
    {
        return $this->roles;
    }

    public function eraseCredentials()
    {
    }

    public function serialize()
    {
        return serialize(array(
            $this->id,
            $this->username,
            $this->password,
            // $this->salt,
        ));
    }

    public function unserialize($serialized)
    {
        list (
            $this->id,
            $this->username,
            $this->password,
            // $this->salt
            ) = unserialize($serialized);
        }

    /**
     * Get id
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    public function getUsername()
    {
        return $this->username;
    }

    /**
     * Set username
     *
     * @param string $username
     *
     * @return User
     */
    public function setUsername($username)
    {
        $this->username = $username;

        return $this;
    }

    public function getPassword()
    {
        return $this->password;
    }

    /**
     * Set password
     *
     * @param string $password
     *
     * @return User
     */
    public function setPassword($password)
    {
        $this->password = $password;

        return $this;
    }

    public function getPlainPassword()
    {
        return $this->plainPassword;
    }

    public function setPlainPassword($password)
    {
        $this->plainPassword = $password;
    }

    /**
     * Set roles
     *
     * @param array $roles
     *
     * @return User
     */
    public function setRoles($roles)
    {
        $this->roles = $roles;

        return $this;
    }

    /**
     * Set creationDate
     *
     * @param \DateTime $creationDate
     *
     * @return User
     */
    public function setCreationDate($creationDate)
    {
        $this->creationDate = $creationDate;

        return $this;
    }

    /**
     * Get creationDate
     *
     * @return \DateTime
     */
    public function getCreationDate()
    {
        return $this->creationDate;
    }

    /**
     * Set email
     *
     * @param string $email
     *
     * @return User
     */
    public function setEmail($email)
    {
        $this->email = $email;

        return $this;
    }

    /**
     * Get email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->email;
    }
}
